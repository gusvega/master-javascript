name: Extended Workflow with Linux Commands

on: [push]

jobs:
  prepare_environment:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.check_status.outputs.result }}
    steps:
    - uses: actions/checkout@v3
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'
    - name: Check Disk Usage
      id: check_status
      run: |
        node -e '
          const { exec } = require("child_process");
          exec("df -h", (error, stdout, stderr) => {
            if (error) {
              console.error(`exec error: ${error}`);
              return;
            }
            if (stderr) {
              console.error(`stderr: ${stderr}`);
              return;
            }
            console.log(`stdout: ${stdout}`);
            console.log("::set-output name=result::success");
          });
        '

  test_application:
    needs: prepare_environment
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'
    - name: Run Unit Tests
      run: |
        node -e '
          const { exec } = require("child_process");
          exec("make test", (error, stdout, stderr) => {
            if (error) {
              console.error(`exec error: ${error}`);
              return;
            }
            if (stderr) {
              console.error(`stderr: ${stderr}`);
              return;
            }
            console.log(`stdout: ${stdout}`);
          });
        '

  deploy:
    needs: test_application
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'
    - name: Deploy to Production
      run: |
        node -e '
          const { exec } = require("child_process");
          exec("echo Deploying application", (error, stdout, stderr) => {
            if (error) {
              console.error(`exec error: ${error}`);
              return;
            }
            if (stderr) {
              console.error(`stderr: ${stderr}`);
              return;
            }
            console.log(`stdout: ${stdout}`);
          });
        '
    - name: Cleanup Temporary Files
      run: |
        node -e '
          const { exec } = require("child_process");
          exec("rm -rf /tmp/*", (error, stdout, stderr) => {
            if (error) {
              console.error(`exec error: ${error}`);
              return;
            }
            if (stderr) {
              console.error(`stderr: ${stderr}`);
              return;
            }
            console.log("Temporary files cleaned up.");
          });
        '
